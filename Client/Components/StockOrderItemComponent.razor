@using DominosStockOrder.Client.Services
@using DominosStockOrder.Shared.ViewModels
@using DominosStockOrder.Shared
@using System.Text.Json
@inject IInventoryItemService Inventory
@inject FoodTheoService FoodTheo
@inject HttpClient Http

<div class="row mb-1 striped @ExtraClass">
    <div class="col-1 my-auto pulseCode">@Item.PulseCode</div>
    <div class="col my-auto description">@Item.Description</div>

    @if(_inventoryItem.Comment is not null && !string.IsNullOrWhiteSpace(_inventoryItem.Comment))
    {
        <div class="alert alert-info w-auto p-1 mb-auto comment" style="top: .125em;">@_inventoryItem.Comment</div>
    }

    @if (_inventoryItem?.DoubleCheck ?? false)
    {
        <div style="display:contents;"><input type="checkbox" class="form-check-input scale2 doublecheck" @bind="@_inventoryItem.WasDoubleChecked" /></div>
    }

    <div class="col-2 my-auto finalOrder"><input type="text" inputmode="numeric" class="form-control" @bind="@Item.Override" /></div>
    @if (_problems.Any())
    {
        foreach (var problem in _problems)
        {
            <div>
                <span class="d-block problemText">@problem</span>
            </div>
        }
    }
    @if (!_inventoryItem.ManualCount && _numFoodTheoWeeks != Constants.NumFoodTheoWeeks)
    {
        <div class="row mb-3 initialFoodTheo">
            <span class="d-block">Insufficient food theo data. Please enter an initial weekly theo</span>
            <div class="col-2">
                <input type="text" inputmode="numeric" class="form-control" @bind="@_initialFoodTheo" />
            </div>
            <div class="col">
                <button class="btn btn-primary" @onclick="@OnWeeklyFoodTheoSet">Set</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public StockOrderRequestItemVM Item { get; set; }

    private bool _bErrorOccurred = false;
    private string ExtraClass => (!_problems.Any() || _numFoodTheoWeeks >= Constants.NumFoodTheoWeeks) ? string.Empty : _bErrorOccurred ? "alert-danger" : "alert-warning";
    private List<string> _problems = [];
    private float _initialFoodTheo;
    private float? initialRollingAvg = null;

    private InventoryItemVM? _inventoryItem = null;

    private int _numFoodTheoWeeks = 0;
    private float _rollingAvg = 0;

    protected override async Task OnInitializedAsync()
    {
        _inventoryItem = await Inventory.GetInventoryItemFromPulseCodeAsync(Item.PulseCode);

        var workings = FoodTheo.GetWorkingsFromPulseCode(Item.PulseCode);

        if (workings is not null)
        {
            _numFoodTheoWeeks = workings.WeeklyFoodTheo.Count;
            _rollingAvg = workings.WeeklyFoodTheo.DefaultIfEmpty(0).Average();
        }
    }

    protected override void OnParametersSet()
    {
        _problems.Clear();
        _bErrorOccurred = false;

        if (_inventoryItem is null)
        {
            _problems.Add("Item does not exist in database");
            _bErrorOccurred = true;
        }
        else
        {
            if (_inventoryItem.Code != Item.PulseCode)
            {
                _problems.Add($"Pulse codes mismatched {_inventoryItem.Code} | {Item.PulseCode}");
                _bErrorOccurred = true;
            }

            if (_inventoryItem.PackSize != Item.PackSize && !_inventoryItem.ManualCount)
            {
                _problems.Add($"Pack size mismatched {_inventoryItem.PackSize} | {Item.PackSize}");
                _bErrorOccurred = true;
            }
        }

        if (Item.IsNewInventory)
        {
            _problems.Add("New Item");
        }

        if (Item.IsPackSizeUpdated)
        {
            _problems.Add($"Pack size changed to {Item.PackSize}");
        }

        if (Item.IsItemEnabledRecently)
        {
            _problems.Add("Item added recently");
        }

        if (Item.IsItemCodeChangedRecently)
        {
            _problems.Add("Item code changed recently");
        }
    }

    private async Task OnWeeklyFoodTheoSet()
    {
        initialRollingAvg ??= _rollingAvg;

        _rollingAvg = (_initialFoodTheo * (Constants.NumFoodTheoWeeks - _numFoodTheoWeeks) + initialRollingAvg.Value) / Constants.NumFoodTheoWeeks;
        _numFoodTheoWeeks = Constants.NumFoodTheoWeeks;

        await Http.PutAsJsonAsync($"api/FoodTheo/Initial/{Item.PulseCode}", JsonSerializer.Serialize(_initialFoodTheo));
    }
}