@using DominosStockOrder.Client.Services
@using DominosStockOrder.Shared.ViewModels
@inject IFinalOrderCalculatorService FinalOrder

<button class="btn btn-warning w-100 mb-3" @onclick="@(async e => await CalculateFinalOrderForAllItems())">Calculate Final Order</button>

<div class="accordion" id="orderItems">
    <StockOrderSection UniqueId="suggested" Title="Suggested Products" Items="@_suggestedItems" />
    <StockOrderSection UniqueId="manual" Title="Manual Count Products" Items="@_manualItems" />
</div>

@code {
    [Parameter]
    public StockOrderRequestVM Order { get; set; }

    private IEnumerable<StockOrderRequestItemVM> _suggestedItems;
    private IEnumerable<StockOrderRequestItemVM> _manualItems;

    protected override void OnParametersSet()
    {
        var grouped = Order.Items.GroupBy(i => i.DatabaseInfo.ManualCount);
        var selected = grouped.Select(g => new
        {
            IsManualCount = g.Key,
            Items = g.AsEnumerable()
        });

        _suggestedItems = selected.Where(x => !x.IsManualCount).SelectMany(x => x.Items).ToList();
        _manualItems = selected.Where(x => x.IsManualCount).SelectMany(x => x.Items).ToList();
    }

    private async Task CalculateFinalOrderForAllItems()
    {
        foreach (var item in Order.Items)
        {
            await FinalOrder.CalculateFinalOrder(item.PulseCode);
        }

        StateHasChanged();
    }
}