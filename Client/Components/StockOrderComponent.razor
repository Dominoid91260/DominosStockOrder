@using DominosStockOrder.Client.Services
@using DominosStockOrder.Shared
@using DominosStockOrder.Shared.Models.Purchasing
@using DominosStockOrder.Shared.ViewModels
@using System.ComponentModel.DataAnnotations
@using System.Timers
@inject IFinalOrderCalculatorService FinalOrder
@inject IInventoryItemService Inventory
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@implements IDisposable

<div class=="form-check">
    <input type="checkbox" class="form-check-input" @bind="@_editInTransit" id="editInTransit" />
    <label for="editInTransit" class="form-check-label">Edit In Transit</label>
</div>

<button id="calculateFinalOrderButton" class="btn btn-warning w-100 mb-3" @onclick="@(async e => await CalculateFinalOrderForAllItems())">Calculate Final Order</button>

<EditForm EditContext="@editContext" OnValidSubmit="@SaveOrderToPortal">
    @if (!string.IsNullOrWhiteSpace(_statusText))
    {
        <div class="alert alert-info">
            @_statusText
        </div>
    }
    <div class="accordion" id="orderItems">
        @if (_suggestedItems is not null)
        {
            <StockOrderSection UniqueId="suggested" Title="Suggested Products" Items="@_suggestedItems" OnOrderItemOverrideChanged="OnOrderItemOverrideChanged" EditInTransit="_editInTransit"/>
        }

        @if (_manualItems is not null)
        {
            <StockOrderSection UniqueId="manual" Title="Manual Count Products" Items="@_manualItems" OnOrderItemOverrideChanged="OnOrderItemOverrideChanged" />
        }
    </div>

    <div class="alert alert-danger mt-3 validationContainer">
        <ObjectGraphDataAnnotationsValidator />
        <ValidationSummary />
    </div>

    @if (!string.IsNullOrWhiteSpace(_statusText))
    {
        <div class="alert alert-info my-3">
            @_statusText
        </div>
    }

    <div class="my-3">
        <button id="saveOrderToPortalButton" class="btn btn-primary w-100" type="submit" disabled="@_saveButtonDisable">Save Order to Portal</button>
    </div>
</EditForm>

<NavigationLock ConfirmExternalNavigation="@_hasChanges" OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

@code {
    [Parameter]
    [ValidateComplexType]
    public StockOrderRequestVM Order { get; set; }

    private IEnumerable<StockOrderRequestItemVM>? _suggestedItems;
    private IEnumerable<StockOrderRequestItemVM>? _manualItems;
    private bool _saveButtonDisable = false;

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    private bool _hasChanges = false;
    private bool _editInTransit = false;

    private System.Timers.Timer statusTimer = new();
    private string _statusText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        editContext = new(Order);
        editContext.OnValidationRequested += HandleValidationRequested;

        messageStore = new(editContext);

        await CheckStatus();
        statusTimer = new Timer();
        statusTimer.AutoReset = true;
        statusTimer.Interval = (int)TimeSpan.FromSeconds(5).TotalMilliseconds;
        statusTimer.Elapsed += async (s, e) => await CheckStatus();
        statusTimer.Start();
    }

    protected override void OnParametersSet()
    {
        var grouped = Order.Items.GroupBy(i => Inventory.GetInventoryItemFromPulseCode(i.PulseCode).ManualCount);
        var selected = grouped.Select(g => new
        {
            IsManualCount = g.Key,
            Items = g.AsEnumerable()
        });

        _suggestedItems = selected.Where(x => !x.IsManualCount).SelectMany(x => x.Items).ToList();
        _manualItems = selected.Where(x => x.IsManualCount).SelectMany(x => x.Items).ToList();
    }

    private async Task CalculateFinalOrderForAllItems()
    {
        _hasChanges = true;

        foreach (var item in Order.Items)
        {
            var inventoryItem = Inventory.GetInventoryItemFromPulseCode(item.PulseCode);

            // Require manual order items to be manually reviewed.
            if (inventoryItem.ManualCount)
            {
                item.Override = 0;
            }
            else
            {
                item.Override = await FinalOrder.CalculateFinalOrder(item.PulseCode, item.InTransit);
            }
        }

        StateHasChanged();
    }

    private async Task SaveOrderToPortal()
    {
        if (Order is null)
            return;

        _saveButtonDisable = true;

        var transformedOrder = new OrderResponse
        {
            PurchaseOrderId = Order.PurchaseOrderId,
            Items = Order.Items.Select(i => new OrderResponseItem
                {
                PurchaseOrderItemId = i.PurchaseOrderItemId,
                Override = i.Override
            })
        };

        _statusText = string.Empty;
        await Http.PostAsJsonAsync("/api/PendingOrders", transformedOrder);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        foreach (var item in Order.Items)
        {
            var inventoryItem = Inventory.GetInventoryItemFromPulseCode(item.PulseCode);
            if (inventoryItem.DoubleCheck && !inventoryItem.WasDoubleChecked)
            {
                messageStore?.Add(() => inventoryItem.WasDoubleChecked, $"<a href=\"#{item.PulseCode}\">{item.Description} needs to be double checked</a>");
            }
        }
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        if (!_hasChanges)
            return;

        var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "Stock order has unsaved changes which will be lost.");

        if (!isConfirmed)
        {
            context.PreventNavigation();
        }
    }

    private void OnOrderItemOverrideChanged()
    {
        _hasChanges = true;
    }

    private async Task CheckStatus()
    {
        Console.WriteLine("Checking Status...");
        var status = await Http.GetFromJsonAsync<Status>("/api/Status");

        if (status is null)
        {
            Console.WriteLine("\tInvalid Status");
            _statusText = "Invalid status";
            _saveButtonDisable = true;
            StateHasChanged();
            return;
        }

        if (!status.EODRun)
        {
            Console.WriteLine("\tEOD not run");
            _statusText = "EOD has not been run";
            _saveButtonDisable = true;
            StateHasChanged();
        }
        else if (!status.IsConnectedToBrowser)
        {
            Console.WriteLine("\tNot connected to browser");
            _statusText = "Unable to communicate with ordering portal";
            _saveButtonDisable = true;
            StateHasChanged();
        }
        else if (status.IsOrderSuccessful.HasValue)
        {
            if (status.IsOrderSuccessful.Value)
            {
                Console.WriteLine("\tOrder placed successfully");
                _statusText = "Order placed successfully";
                _hasChanges = false;
            }
            else
            {
                Console.WriteLine("Error saving order: \"" + status.OrderError + "\"");
                _statusText = status.OrderError;
            }

            _saveButtonDisable = false;
            StateHasChanged();
        }
    }
}