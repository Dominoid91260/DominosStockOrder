 @using DominosStockOrder.Client.Services
@using DominosStockOrder.Shared.Models.Purchasing
@using DominosStockOrder.Shared.ViewModels
@using System.ComponentModel.DataAnnotations
@inject IFinalOrderCalculatorService FinalOrder
@inject IInventoryItemService Inventory
@inject HttpClient Http
@implements IDisposable

<button id="calculateFinalOrderButton" class="btn btn-warning w-100 mb-3" @onclick="@(async e => await CalculateFinalOrderForAllItems())">Calculate Final Order</button>

<EditForm EditContext="@editContext" OnValidSubmit="@SaveOrderToPortal">
    <div class="accordion" id="orderItems">
        <StockOrderSection UniqueId="suggested" Title="Suggested Products" Items="@_suggestedItems" />
        <StockOrderSection UniqueId="manual" Title="Manual Count Products" Items="@_manualItems" />
    </div>

    <div class="alert alert-danger mt-3 validationContainer">
        <ObjectGraphDataAnnotationsValidator />
        <ValidationSummary />
    </div>

    <div class="my-3">
        <button id="saveOrderToPortalButton" class="btn btn-primary w-100" type="submit" disabled="@_saveButtonDisable">Save Order to Portal</button>
    </div>
</EditForm>

@code {
    [Parameter]
    [ValidateComplexType]
    public StockOrderRequestVM Order { get; set; }

    private IEnumerable<StockOrderRequestItemVM> _suggestedItems;
    private IEnumerable<StockOrderRequestItemVM> _manualItems;
    private bool _saveButtonDisable = false;

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        editContext = new(Order);
        editContext.OnValidationRequested += HandleValidationRequested;

        messageStore = new(editContext);
    }

    protected override void OnParametersSet()
    {
        var grouped = Order.Items.GroupBy(i => Inventory.GetInventoryItemFromPulseCode(i.PulseCode).ManualCount);
        var selected = grouped.Select(g => new
        {
            IsManualCount = g.Key,
            Items = g.AsEnumerable()
        });

        _suggestedItems = selected.Where(x => !x.IsManualCount).SelectMany(x => x.Items).ToList();
        _manualItems = selected.Where(x => x.IsManualCount).SelectMany(x => x.Items).ToList();
    }

    private async Task CalculateFinalOrderForAllItems()
    {
        foreach (var item in Order.Items)
        {
            var inventoryItem = Inventory.GetInventoryItemFromPulseCode(item.PulseCode);

            // Require manual order items to be manually reviewed.
            if (inventoryItem.ManualCount)
            {
                item.Override = 0;
            }
            else
            {
                item.Override = await FinalOrder.CalculateFinalOrder(item.PulseCode, item.InTransit);
            }
        }

        StateHasChanged();
    }

    private async Task SaveOrderToPortal()
    {
        if (Order is null)
            return;

        _saveButtonDisable = true;

        var transformedOrder = new OrderResponse
        {
            PurchaseOrderId = Order.PurchaseOrderId,
            Items = Order.Items.Select(i => new OrderResponseItem
                {
                PurchaseOrderItemId = i.PurchaseOrderItemId,
                Override = i.Override
            })
        };

        await Http.PostAsJsonAsync("/api/PendingOrders", transformedOrder);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        foreach (var item in Order.Items)
        {
            var inventoryItem = Inventory.GetInventoryItemFromPulseCode(item.PulseCode);
            if (inventoryItem.DoubleCheck && !inventoryItem.WasDoubleChecked)
            {
                messageStore?.Add(() => inventoryItem.WasDoubleChecked, $"{item.Description} needs to be double checked");
            }
        }
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}