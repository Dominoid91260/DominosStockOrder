@using DominosStockOrder.Client.Services
@using DominosStockOrder.Shared
@using DominosStockOrder.Shared.DTOs
@using DominosStockOrder.Shared.ViewModels
@inject IInventoryItemService Inventory
@inject IFinalOrderCalculatorService FinalOrder
@inject IExtraInventoryService ExtraInventory
@inject ITransferService Transfer
@inject SettingsService Settings

<div class="row hoveroutline">
    <div class="col-2">@_item.Description</div>

    @if (ShowWeeklyTheo)
    {
        for (var i = 0; i < Settings.NumFoodTheoWeeks; ++i)
        {
            var content = 0.ToString("0.00");

            if (i < Working.WeeklyFoodTheo.Count)
            {
                content = Working.WeeklyFoodTheo[i].IdealUsage.ToString("0.00");
            }

            <div class="col">@content</div>
        }
    }

    <div class="col">@_combinedAvg.ToString("0.00")</div>
    <div class="col">@Working.EndingInventory.ToString("0.00")</div>

    @if (ShowExtraTheo)
    {
        <div class="col">@ExtraInventory.GetExtraInventoryForPulseCode(Working.PulseCode).ToString("0.00")</div>
    }

    @if (ShowTransferred)
    {
        <div class="col">@((Transfer.GetTransferForPulseCode(Working.PulseCode)?.Quantity ?? 0).ToString("0.00"))</div>
    }

    <div class="col">@_finalOrder</div>
</div>

@code {
    [Parameter] public WorkingsVM Working { get; set; }
    [Parameter] public bool ShowWeeklyTheo { get; set; }
    [Parameter] public bool ShowExtraTheo { get; set; }
    [Parameter] public bool ShowTransferred { get; set; }

    private InventoryItemVM _item;
    private float _combinedAvg = 0;
    private int _finalOrder = 0;

    protected override async Task OnInitializedAsync()
    {
        _combinedAvg = Working.WeeklyFoodTheo.DefaultIfEmpty(new ItemWeeklyFoodTheo{ IdealUsage = 0 }).Average(x => x.IdealUsage);
        _item = await Inventory.GetInventoryItemFromPulseCodeAsync(Working.PulseCode);
        _finalOrder = await FinalOrder.CalculateFinalOrder(_item.Code, 0);
    }
}
