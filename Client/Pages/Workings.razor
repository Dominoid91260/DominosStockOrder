@page "/Workings"
@using DominosStockOrder.Shared
@using DominosStockOrder.Shared.ViewModels
@inject HttpClient Http

@if (bIsLoading)
{
    <div class="row">
        <p>Loading...</p>
    </div>
}
else if (bErrorOccurred)
{
    <div class="row">
        <p>An error occurred while loading food theo</p>
    </div>
}
else if (!_workings.Any())
{
    <div class="row">
        <p>No data</p>
    </div>
}
else
{
    <div class="row">
        <div class="col-2 fw-bold">Description</div>

        @for (var i = 0; i < Constants.NumFoodTheoWeeks; ++i)
        {
            var today = DateTime.Now;
            var weekEnding = today.AddDays(-(int)today.DayOfWeek).AddDays(-7 * i);
            <div class="col fw-bold">@weekEnding.ToString("dd/MM")</div>
        }

        <div class="col fw-bold">Combined Average</div>
    </div>

    @foreach (var working in _workings)
    {
        var combinedAvg = working.WeeklyFoodTheo.DefaultIfEmpty(0).Average();

        <div class="row">
            <div class="col-2">@working.Description</div>

            @for (var i = 0; i < Constants.NumFoodTheoWeeks; ++i)
            {
                var content = string.Empty;

                if (i < working.WeeklyFoodTheo.Count)
                {
                    content = working.WeeklyFoodTheo[i].ToString("0.00");
                }

                <div class="col">@content</div>
            }

            <div class="col">@combinedAvg.ToString("0.00")</div>
        </div>
    }
}

@code {
    private IEnumerable<WorkingsVM> _workings = Enumerable.Empty<WorkingsVM>();
    private bool bIsLoading = true;
    private bool bErrorOccurred = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<IEnumerable<WorkingsVM>>("/api/FoodTheo");
        bIsLoading = false;

        if (result is null)
        {
            bErrorOccurred = true;
            return;
        }

        _workings = result;
    }
}
