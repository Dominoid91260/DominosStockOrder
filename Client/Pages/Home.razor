@page "/"
@using DominosStockOrder.Client.Components
@using DominosStockOrder.Client.Services
@using DominosStockOrder.Shared.ViewModels
@inject HttpClient Http
@inject IExtraInventoryService ExtraInventory

<PageTitle>Stock Order</PageTitle>

<div class="container">

@if (bLoading)
{
    <div class="alert alert-secondary text-center">Loading...</div>
}
else if (!_orders.Any())
{
    <p class="alert alert-secondary text-center">No pending orders</p>
}
else
{
    <div id="orderSelector" class="row mb-3">
        <div class="col d-flex">
            <InputSelect @bind-Value="_selectedOrder" disabled="@(_orders.Count() == 1)" class="form-select" style="align-self:flex-end;">
                @foreach (var order in _orders)
                {
                    <option value="@order">@order.DeliveryDate.ToString("D")</option>
                }
            </InputSelect>
        </div>
        <div class="col">
            <label for="extraInventory" class="form-label">Additional Ending Inventory</label>
            <input id="extraInventory" class="form-control" type="date" @bind="_extraInventoryDate" @bind:after="FetchExtraInventory" />
        </div>
    </div>

    @if (_selectedOrder is not null)
    {
        <StockOrderComponent Order=_selectedOrder />
    }
}

</div>

@code {
    private IEnumerable<StockOrderRequestVM> _orders = Enumerable.Empty<StockOrderRequestVM>();
    private StockOrderRequestVM? _selectedOrder = null;
    private DateTime? _extraInventoryDate = null;

    private bool bLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await FetchPendingOrders();
    }

    private async Task FetchPendingOrders()
    {
        bLoading = true;
        _orders = await Http.GetFromJsonAsync<IEnumerable<StockOrderRequestVM>>("/api/PendingOrders") ?? Enumerable.Empty<StockOrderRequestVM>();
        bLoading = false;

        _selectedOrder = _orders?.FirstOrDefault();
    }

    private async Task FetchExtraInventory()
    {
        if (_extraInventoryDate is null)
        {
            ExtraInventory.Clear();
            return;
        }

        bLoading = true;
        await ExtraInventory.FetchExtraInventoryFor(_extraInventoryDate.Value);
        bLoading = false;
    }
}
